/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AbublavyAmbulanceWlApp {
        "basePath": string;
    }
    interface AbublavyAmbulanceWlEditor {
        "entryId": string;
    }
    interface AbublavyAmbulanceWlList {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface AbublavyAmbulanceWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAbublavyAmbulanceWlEditorElement;
}
export interface AbublavyAmbulanceWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAbublavyAmbulanceWlListElement;
}
declare global {
    interface HTMLAbublavyAmbulanceWlAppElement extends Components.AbublavyAmbulanceWlApp, HTMLStencilElement {
    }
    var HTMLAbublavyAmbulanceWlAppElement: {
        prototype: HTMLAbublavyAmbulanceWlAppElement;
        new (): HTMLAbublavyAmbulanceWlAppElement;
    };
    interface HTMLAbublavyAmbulanceWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLAbublavyAmbulanceWlEditorElement extends Components.AbublavyAmbulanceWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAbublavyAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLAbublavyAmbulanceWlEditorElement, ev: AbublavyAmbulanceWlEditorCustomEvent<HTMLAbublavyAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAbublavyAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLAbublavyAmbulanceWlEditorElement, ev: AbublavyAmbulanceWlEditorCustomEvent<HTMLAbublavyAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAbublavyAmbulanceWlEditorElement: {
        prototype: HTMLAbublavyAmbulanceWlEditorElement;
        new (): HTMLAbublavyAmbulanceWlEditorElement;
    };
    interface HTMLAbublavyAmbulanceWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLAbublavyAmbulanceWlListElement extends Components.AbublavyAmbulanceWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAbublavyAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLAbublavyAmbulanceWlListElement, ev: AbublavyAmbulanceWlListCustomEvent<HTMLAbublavyAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAbublavyAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLAbublavyAmbulanceWlListElement, ev: AbublavyAmbulanceWlListCustomEvent<HTMLAbublavyAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAbublavyAmbulanceWlListElement: {
        prototype: HTMLAbublavyAmbulanceWlListElement;
        new (): HTMLAbublavyAmbulanceWlListElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "abublavy-ambulance-wl-app": HTMLAbublavyAmbulanceWlAppElement;
        "abublavy-ambulance-wl-editor": HTMLAbublavyAmbulanceWlEditorElement;
        "abublavy-ambulance-wl-list": HTMLAbublavyAmbulanceWlListElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface AbublavyAmbulanceWlApp {
        "basePath"?: string;
    }
    interface AbublavyAmbulanceWlEditor {
        "entryId"?: string;
        "onEditor-closed"?: (event: AbublavyAmbulanceWlEditorCustomEvent<string>) => void;
    }
    interface AbublavyAmbulanceWlList {
        "onEntry-clicked"?: (event: AbublavyAmbulanceWlListCustomEvent<string>) => void;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "abublavy-ambulance-wl-app": AbublavyAmbulanceWlApp;
        "abublavy-ambulance-wl-editor": AbublavyAmbulanceWlEditor;
        "abublavy-ambulance-wl-list": AbublavyAmbulanceWlList;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "abublavy-ambulance-wl-app": LocalJSX.AbublavyAmbulanceWlApp & JSXBase.HTMLAttributes<HTMLAbublavyAmbulanceWlAppElement>;
            "abublavy-ambulance-wl-editor": LocalJSX.AbublavyAmbulanceWlEditor & JSXBase.HTMLAttributes<HTMLAbublavyAmbulanceWlEditorElement>;
            "abublavy-ambulance-wl-list": LocalJSX.AbublavyAmbulanceWlList & JSXBase.HTMLAttributes<HTMLAbublavyAmbulanceWlListElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
